(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{449:function(s,t,r){"use strict";r.r(t);var a=r(2),_=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"研究问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#研究问题"}},[s._v("#")]),s._v(" 研究问题")]),s._v(" "),t("ul",[t("li",[s._v("为什么3d gaussian是椭球？")]),s._v(" "),t("li",[s._v("协方差矩阵为什么可以控制椭球的形状？")]),s._v(" "),t("li",[s._v("协方差矩阵为什么可以用旋转和缩放矩阵表达？")]),s._v(" "),t("li",[s._v("各向异性和各向同性是什么意思？")]),s._v(" "),t("li",[s._v("为什么引入雅可比，这个雅可比矩阵是什么？")]),s._v(" "),t("li",[s._v("球谐函数怎么就能更好地表达颜色？")]),s._v(" "),t("li",[s._v("3dgs怎么就快了？")])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"总的框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总的框架"}},[s._v("#")]),s._v(" 总的框架")]),s._v(" "),t("p",[s._v("首先有一个初始化的点云，然后"),t("strong",[s._v("通过训练得到了高斯椭球的中心点")]),s._v("，但是此时的高斯椭球没有形状也没有旋转方向。然后将高斯椭球的形状以及方向加入，就得到了带有形状大小以及旋转方向的信息的点云。最后加入不透明度的信息，就可以得到最后的渲染图片了。")]),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Clizhi%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240624100048627.png",alt:"image-20240624100048627"}})]),s._v(" "),t("h3",{attrs:{id:"伪代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#伪代码"}},[s._v("#")]),s._v(" 伪代码")]),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Clizhi%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240624100537282.png",alt:"image-20240624100537282"}})]),s._v(" "),t("p",[s._v("$M$：点云的位置，也就是均值$\\mu$")]),s._v(" "),t("p",[s._v("$V$：相机的位姿")]),s._v(" "),t("p",[s._v("$\\hat{I}$：ground-truth，数据集中的真实照片")]),s._v(" "),t("h3",{attrs:{id:"_1-sfm初始化稀疏点云-视频转化成了空间位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-sfm初始化稀疏点云-视频转化成了空间位置"}},[s._v("#")]),s._v(" 1. sfm初始化稀疏点云：视频转化成了空间位置")]),s._v(" "),t("p",[s._v("第一步，要初始化稀疏点云，这一步采用了类似colmap的方式实现。通过一组照片，推理每一个照片对应的相机位姿，然后也能得到他们这一组照片里的每一个特征点，"),t("strong",[s._v("将这种特征点投射到世界坐标系中，就可以得到一些稀疏的关键点云")]),s._v("。这些点云用作于3dgs一开始场景中的默认一些点。当然这个些点云是否能够直接初始化，也是可以的，但是最后收敛可能就没有那么快。所以他一般通过这种方式，先得到一组初始化点云。")]),s._v(" "),t("blockquote",[t("h4",{attrs:{id:"特征点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特征点"}},[s._v("#")]),s._v(" 特征点")]),s._v(" "),t("p",[t("strong",[s._v("图像的特征点的定义：")])]),s._v(" "),t("p",[s._v("图像的特征点（Keypoints or Feature Points）是指图像中具有显著特征、易于识别且在各种变换（如旋转、缩放、光照变化等）下具有较高稳定性和可重复性的位置。")]),s._v(" "),t("p",[t("strong",[s._v("特征点的主要特点包括：")])]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("显著性")]),s._v("：特征点应在图像中具有显著特征，易于从背景中分离出来。")]),s._v(" "),t("li",[t("strong",[s._v("可重复性")]),s._v("：在不同的图像或不同的时间拍摄的同一场景中，特征点应能够被稳定地检测出来。")]),s._v(" "),t("li",[t("strong",[s._v("独特性")]),s._v("：特征点应具备独特的描述子，使其在匹配过程中能够准确区分不同的点。")])]),s._v(" "),t("p",[t("strong",[s._v("为什么图像会具有特征点：")])]),s._v(" "),t("p",[s._v("图像中的特征点之所以存在并且能被检测出来，是因为图像通常包含一些在视觉上突出的区域，这些区域在各种变换（如旋转、缩放、光照变化等）下能够保持稳定和可识别性。以下是一些原因和原理，解释了为什么图像会有特征点：")]),s._v(" "),t("ol",[t("li",[s._v("图像中的结构信息")])]),s._v(" "),t("p",[s._v("特征点通常位于图像中具有丰富结构信息的区域，例如角点、边缘、纹理和突变区域。这些区域包含了图像的独特信息，有助于区别不同的部分。")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("不变性")])]),s._v(" "),t("p",[s._v("有效的特征点具有不变性，即它们在各种图像变换下保持稳定。这意味着即使图像发生了旋转、缩放、光照变化或仿射变换，这些特征点仍然可以被检测和匹配。这种不变性使特征点在图像配准、拼接、三维重建等任务中非常有用。")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("视觉显著性")])]),s._v(" "),t("p",[s._v("特征点通常是图像中视觉上显著的点。例如，在一个角点处，图像的梯度变化剧烈，这使得角点在视觉上很容易被识别和定位。同样，纹理丰富的区域往往包含许多可以作为特征点的显著变化。")]),s._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[s._v("算法特性")])]),s._v(" "),t("p",[s._v("不同的特征点检测算法通过不同的方式识别图像中的特征点。以下是几种常见算法的特性：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Harris 角点检测器")]),s._v("：利用图像梯度的变化来检测角点，适用于识别图像中的角点。")]),s._v(" "),t("li",[t("strong",[s._v("SIFT（尺度不变特征变换）")]),s._v("：通过检测尺度空间中的极值点来识别特征点，具有尺度和旋转不变性。")]),s._v(" "),t("li",[t("strong",[s._v("SURF（加速鲁棒特征）")]),s._v("：改进了SIFT算法，使用Hessian矩阵来检测特征点，计算速度更快。")]),s._v(" "),t("li",[t("strong",[s._v("ORB（快速特征点检测和描述）")]),s._v("：结合了FAST角点检测和BRIEF描述子，计算速度快，适用于实时应用。")])]),s._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[s._v("应用需求")])]),s._v(" "),t("p",[s._v("在计算机视觉和图像处理的许多应用中，特征点是非常重要的。例如：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("图像匹配和配准")]),s._v("：通过匹配不同图像中的特征点，可以对齐图像，进行拼接或全景图构建。")]),s._v(" "),t("li",[t("strong",[s._v("对象识别")]),s._v("：特征点可以帮助识别和定位图像中的对象。")]),s._v(" "),t("li",[t("strong",[s._v("三维重建")]),s._v("：通过匹配多幅图像中的特征点，可以恢复三维结构。")])]),s._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("原始图像                       旋转后的图像\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    ●    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("旋转"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    ●    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" \\   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" \\   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("   \\  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("   \\  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("     \\ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("     \\ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n")])])]),t("p",[s._v("上图中，特征点（●）在旋转后的图像中仍然保持其相对位置。")])]),s._v(" "),t("h3",{attrs:{id:"_2-3d高斯椭球集的创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3d高斯椭球集的创建"}},[s._v("#")]),s._v(" 2. 3D高斯椭球集的创建")]),s._v(" "),t("h4",{attrs:{id:"位置信息与形状信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位置信息与形状信息"}},[s._v("#")]),s._v(" 位置信息与形状信息")]),s._v(" "),t("p",[s._v("位置信息：即高斯椭球的中心点，就是均值$\\mu$，用$(x,y,z)$表示，后续会不断通过优化这个得到更加精确的位置信息；")]),s._v(" "),t("p",[s._v("形状信息：即"),t("strong",[s._v("高斯椭球")]),s._v("的协方差矩阵$\\Sigma$ ，其中$\\Sigma=RSS^TR^T$，其包含了高斯椭球的"),t("strong",[s._v("旋转矩阵$R$"),t("strong",[s._v("以及各个轴的")]),s._v("缩放矩阵$S$")]),s._v("。（其实就是对一个标准的椭圆进行旋转再拉伸的过程）")]),s._v(" "),t("h4",{attrs:{id:"颜色与不透明度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#颜色与不透明度"}},[s._v("#")]),s._v(" 颜色与不透明度")]),s._v(" "),t("p",[s._v("颜色信息：相对比较复杂，用到了球谐函数，而不是简单的RGB来表示")]),s._v(" "),t("p",[s._v("不透明度：$\\alpha$")]),s._v(" "),t("p",[t("strong",[s._v("球谐函数/系数")])]),s._v(" "),t("h5",{attrs:{id:"基函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基函数"}},[s._v("#")]),s._v(" 基函数")]),s._v(" "),t("p",[s._v("定义：一组可以组成任意函数的分量。")]),s._v(" "),t("p",[s._v("like 傅里叶变换以三角函数系\n$$\n{1,\\sin(wx),\\cos(wx),\\sin(2wx),\\cos(2wx),...,\\sin(nwx),\\cos(nwx)}\n$$\n作为基函数。任意一个函数$f(x)$都可以以三角函数为基进行傅里叶展开。")]),s._v(" "),t("p",[s._v("因此有了基函数，就可以将一个任意的函数描述成基函数的加权和。")]),s._v(" "),t("h5",{attrs:{id:"球面函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#球面函数"}},[s._v("#")]),s._v(" 球面函数")]),s._v(" "),t("p",[s._v("通常表示为$f(\\theta,\\phi)$，其中$\\theta$与$\\phi$是球面坐标系中的两个角度的参数。球面函数的值再球面上的每个点都是唯一的，可以用于描述球面上的各种现象：温度分布、光照强度分布。")]),s._v(" "),t("h5",{attrs:{id:"球谐函数-spherical-harmonics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#球谐函数-spherical-harmonics"}},[s._v("#")]),s._v(" 球谐函数（Spherical Harmonics）")]),s._v(" "),t("p",[s._v("可视化："),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1tM4y1A7sC/?spm_id_from=333.337.search-card.all.click&vd_source=d70106d2962096c1c0ffc161c8a03f66",target:"_blank",rel:"noopener noreferrer"}},[s._v("球谐级数可视化_哔哩哔哩_bilibili"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("是最有名的球面上的基函数，并且具有很多很好的性质。")]),s._v(" "),t("p",[s._v("可以看作一种多项式的拟合，就是一组可以"),t("strong",[s._v("表达球面值变化的基函数")]),s._v("。球谐函数只与仰角$\\theta$以及方位角$\\phi$有关，与半径$r$无关。")]),s._v(" "),t("p",[s._v("球谐函数记为$Y_l^m$：\n$$\nY_l^m(\\theta,\\phi)=\n\\left{\n\\begin{aligned}\n&\\sqrt2K_l^m\\cos(m\\phi)P_l^m(\\cos\\theta)&(m>0)\\\n&\\sqrt2K_l^m\\cos(-m\\phi)P_l^{-m}(\\cos\\theta)&(m<0)\\\n&K_l^0P_l^0(\\cos\\theta)&(m=0)\n\\end{aligned}\n\\right.\n$$\n其中，$l\\in N$称为球谐函数的”次数“，$m\\in [-l,l]$为球谐函数的”阶数“，$K_l^m$为一个缩放系数，$P_l^m(\\cdot)$为勒让德多项式。")]),s._v(" "),t("p",[s._v("各次数基函数的图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://yindaheng98.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/zhimg.com/v2-1ea9c5bac926b47e7410a4a73a91070a_r.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("注意：从上到下次数增大，从左到右阶数增大；")]),s._v(" "),t("p",[s._v("当SH的系数用的越多，那么球谐函数的表达能力就越强，跟原始的函数就会越接近：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://yindaheng98.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/zhimg.com/v2-447fa3cffce97c4d95fd924c3e4ce5b9_r.jpg",alt:"img"}})]),s._v(" "),t("h5",{attrs:{id:"球谐函数的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#球谐函数的应用"}},[s._v("#")]),s._v(" 球谐函数的应用")]),s._v(" "),t("p",[s._v("球谐函数可以用来记录某个值在球面上的分布情况，比如光照或者颜色的分布。")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("用平面表示一球坐标系函数，其中$r$表示半径，且$r=f(\\theta,\\phi)$：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://yindaheng98.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/zhimg.com/v2-17b532bdb46a0d30b9eaf0e45f2df733_b.jpg",alt:"img"}})])]),s._v(" "),t("li",[t("p",[s._v("假设$r$表示亮度，那么$r=f(\\theta,\\phi)$就表示一个球体上的高光情况：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://yindaheng98.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/zhimg.com/v2-663f3ac6abb50526a2019acb0c1b28b0_r.jpg",alt:"img"}})])])]),s._v(" "),t("p",[s._v("原因：")]),s._v(" "),t("p",[s._v("我们知道，三个球坐标系函数可以用来表示出球面上的不同位置的不同颜色（一个球坐标系可以表示一个特定的颜色，在RGB空间中需要有3个球函数表示）。而理论上任意一个球坐标系函数都可以分解为球谐函数的和，所以只需要记下球谐函数的系数就相当于记下了球面上的光照情况。")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("strong",[s._v("球谐函数用不同角度的颜色表达，这在点云的渲染中非常有用。其中3dgs就是用球谐函数记录空间中的Gaussian点在不同方向的颜色。")])])]),s._v(" "),t("p",[s._v("原因：")]),s._v(" "),t("p",[s._v("假设我们有一个函数$f(\\theta,\\phi)$，它表示空间中某个点在方向$(\\theta,\\phi)$上的颜色信息。这个函数可以是 RGB 颜色空间的三个分量之一，如$f_r(\\theta,\\phi)$ 表示红色分量，$f_g(\\theta,\\phi)$表示绿色分量，$f_b(\\theta,\\phi)$ 表示蓝色分量。因此可以使用球谐展开将这个方向上的颜色信息表示为球谐函数的线性组合。")]),s._v(" "),t("p",[s._v("意义：从不同的角度看高斯点云，可以呈现出不同的光泽")]),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Clizhi%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240621175422502.png",alt:"image-20240621175422502"}})]),s._v(" "),t("h2",{attrs:{id:"splatting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#splatting"}},[s._v("#")]),s._v(" Splatting")]),s._v(" "),t("p",[s._v("抛雪球算法的英文名称为splatting方法，也称为足迹法(Footprint)，它是"),t("strong",[s._v("反复对体素的投影叠加效果进行运算")]),s._v("。")]),s._v(" "),t("p",[s._v("它使用一个称为"),t("strong",[s._v("足迹的函数")]),s._v("计算每一体素投影的影响范围，用"),t("strong",[s._v("高斯函数")]),s._v("定义点或者小区域像素的强度分布，从而计算出其对图像的"),t("strong",[s._v("总体贡献")]),s._v("，并加以合成，形成最后的图像。")]),s._v(" "),t("p",[s._v("由于这个方法模仿了"),t("strong",[s._v("雪球被抛到墙壁上所留下的一个扩散状痕迹的现象，因而取名为“抛雪球法”")]),s._v("：想象输入是一个雪球，图片是一面砖墙，图像生成的过程就是向墙面仍雪球的过程。在每扔一个雪球的过程中，墙面上就会有扩散的痕迹，称为足迹 footprint。")]),s._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" "),t("strong",[s._v("定义：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("是一种体渲染地方法，其可以把 3D 的物体渲染到 2D 的平面上")])]),s._v(" "),t("li",[t("p",[s._v("Ray-casting是一种被动的（NeRf）")]),s._v(" "),t("ul",[t("li",[s._v("从一张图片的"),t("strong",[s._v("每个像素")]),s._v("出发，找到影响这个像素的发光粒子，随后确定这个像素的RGB，即计算出每个像素点受到发光粒子的影响来生成图像；")])])]),s._v(" "),t("li",[t("p",[s._v("Spatting是主动的（3dgs）")]),s._v(" "),t("ul",[t("li",[s._v("从粒子出发，"),t("strong",[s._v("每一个粒子")]),s._v("会对像素造成影响，需要计算每个发光粒子如何影响像素点；")])]),s._v(" "),t("blockquote",[t("ul",[t("li",[t("p",[s._v("出自1990年一篇博士论文：https://www.cs.unc.edu/techreports/91-029.pdf")]),s._v(" "),t("p",[s._v("特点：渲染效果快，但是效果一般")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("3dgs基于2001年的"),t("em",[s._v("EWA Volume Splatting https://ieeexplore.ieee.org/document/964490")])])])])])])])]),s._v(" "),t("h3",{attrs:{id:"算法核心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法核心"}},[s._v("#")]),s._v(" "),t("strong",[s._v("算法核心：")])]),s._v(" "),t("p",[s._v("① 选择【雪球】，选择每个特征点适合的雪球；")]),s._v(" "),t("p",[s._v("② 抛掷雪球：是从 3D 投影到 2D，得到足迹；")]),s._v(" "),t("p",[s._v("③ 加以合成，形成最后的图像；")]),s._v(" "),t("h3",{attrs:{id:"step1-选择【雪球】"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step1-选择【雪球】"}},[s._v("#")]),s._v(" step1：选择【雪球】")]),s._v(" "),t("p",[s._v("模型的输入是点云中的一些点，这些点是没有体积的。因此需要对其进行膨胀，于是选择一个核进行膨胀。核的选择可以是高斯、可以是正方体也可以是圆。")]),s._v(" "),t("p",[s._v("高斯椭球的定义：")]),s._v(" "),t("ul",[t("li",[s._v("椭球高斯：$G(x)=\\frac{1}{\\sqrt{(2\\pi)^k |\\Sigma|}}e^{-\\frac{1}{2}(x-\\mu)^T \\Sigma^{-1}(x-\\mu)}$")])]),s._v(" "),t("p",[t("strong",[s._v("为什么选择 3D 高斯椭球？")])]),s._v(" "),t("p",[s._v("优秀的数学性质：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("仿射变换（本质是线性变换）后高斯核函数仍然闭合：3D 降维到 2D之后（沿着某一个轴积分），其仍然为高斯")])])]),s._v(" "),t("p",[s._v("3D 高斯是一个概率，其为什么是一个椭球呢？")]),s._v(" "),t("p",[s._v("椭球的函数：$\\frac{x^2}{a^2}+\\frac{y^2}{b^2}+\\frac{z^2}{c^2}=1$")]),s._v(" "),t("p",[s._v("由于高维的高斯分布与均值 $\\mu$ 以及协方差矩阵 $\\Sigma$ 决定，将$G(x)$的函数形式展开，就可以看出来是一个椭球函数的变换形式了。")]),s._v(" "),t("p",[s._v("所以当$G(x;\\mu,\\Sigma)$在$[0,1]$变化的时候，形成了一个不断外扩的椭球壳，"),t("strong",[s._v("因此形成了一个实心的椭球。")])]),s._v(" "),t("p",[s._v("因此3d Gaussian是一个实心的椭球，而不是一个椭球壳。")]),s._v(" "),t("p",[t("strong",[s._v("各向同性：")])]),s._v(" "),t("ul",[t("li",[s._v("在所有方向具有相同的扩散程度（梯度）")]),s._v(" "),t("li",[s._v("比如 "),t("strong",[s._v("球")]),s._v(" 就是一个具有各向同性的存在，每个轴是不相关的；")]),s._v(" "),t("li",[s._v("其协方差矩阵 $\\Sigma=\\begin{bmatrix} \\sigma^2 & 0 &0 \\ 0 & \\sigma^2 &0\\0 &0 &\\sigma^2 \\end{bmatrix} \\quad$")])]),s._v(" "),t("p",[t("strong",[s._v("各向异性：")])]),s._v(" "),t("ul",[t("li",[s._v("在不同的方向具有不同的扩散程度")]),s._v(" "),t("li",[s._v("比如 "),t("strong",[s._v("椭球")]),s._v(" 就是一个具有各向异性的存在，每个轴之间至少存在一组是相关的；")]),s._v(" "),t("li",[s._v("协方差矩阵 $\\Sigma=\\begin{bmatrix} \\sigma^2 & \\sigma_{xy} &\\sigma_{xz} \\ \\sigma_{yx} & \\sigma^2 &\\sigma_{yz}\\\\sigma_{zx} &\\sigma_{zy} &\\sigma^2 \\end{bmatrix} \\quad$")])]),s._v(" "),t("p",[t("strong",[s._v("协方差矩阵如何控制椭球的形状？")])]),s._v(" "),t("p",[s._v("（其实就是高斯分布的线性变换）")]),s._v(" "),t("p",[s._v("高斯分布：")]),s._v(" "),t("ul",[t("li",[s._v("$\\boldsymbol{x} \\sim N(\\mu,\\Sigma)$")]),s._v(" "),t("li",[s._v("均为三维的，且不是标准的高斯分布")])]),s._v(" "),t("p",[t("strong",[s._v("高斯分布的仿射变换：")])]),s._v(" "),t("ul",[t("li",[s._v("$\\boldsymbol{w}=A\\boldsymbol{x}+b$")]),s._v(" "),t("li",[s._v("$\\boldsymbol{w}\\sim N(A\\mu +b,A\\Sigma A^T)$")])]),s._v(" "),t("p",[t("strong",[s._v("因此可以通过控制 $A$ 的形状，可以将一个标准高斯分布仿射变换至任意一个高斯分布，因此协方差矩阵控制了椭球的形状")])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("结论：任意高斯分布都可以看作是标准高斯分布通过仿射变换得到")]),s._v("，而标准高斯是一个球，因此结论也可以称为：")]),s._v(" "),t("p",[s._v("​\t"),t("strong",[s._v("任意一个椭球都可以经过一个球的仿射变换得到")])])]),s._v(" "),t("p",[t("strong",[s._v("协方差矩阵为什么可以用旋转和缩放表达？")])]),s._v(" "),t("p",[s._v("高斯分布的仿射变换：")]),s._v(" "),t("ul",[t("li",[s._v("$\\boldsymbol{w}=A\\boldsymbol{x}+b$")]),s._v(" "),t("li",[s._v("$\\boldsymbol{w}\\sim N(A\\mu +b,A\\Sigma A^T)$")])]),s._v(" "),t("p",[s._v("$A$ 本质上就是一个旋转矩阵 $R$ 与缩放矩阵 $S$的乘积，即$A=RS$ ，从而\n$$\n\\Sigma&=&A\\cdot I \\cdot A^t \\\n&=& R \\cdot S \\cdot I \\cdot S^T \\cdot R^T\\\n&=& RSS^TR^T\n$$\n（对于$\\Sigma$的分解可以用特征值分解）")]),s._v(" "),t("h3",{attrs:{id:"step2-抛雪球"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step2-抛雪球"}},[s._v("#")]),s._v(" step2：抛雪球")]),s._v(" "),t("p",[s._v("框架：从3D 到 2D 像素的过程")]),s._v(" "),t("p",[t("strong",[s._v("参考："),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1X7411F744/?spm_id_from=333.337.search-card.all.click",target:"_blank",rel:"noopener noreferrer"}},[s._v("GAMES101-现代计算机图形学入门-闫令琪_哔哩哔哩_bilibili"),t("OutboundLink")],1)])]),s._v(" "),t("p",[t("strong",[s._v("相机模型：坐标系之间的转换（NeRf)")])]),s._v(" "),t("ul",[t("li",[s._v("世界坐标系")]),s._v(" "),t("li",[s._v("相机坐标系")]),s._v(" "),t("li",[s._v("归一化坐标系")]),s._v(" "),t("li",[s._v("像素坐标系")])]),s._v(" "),t("p",[t("strong",[s._v("CG模型")])]),s._v(" "),t("ul",[t("li",[s._v("观测变换：世界坐标系 $\\rightarrow$ 相机坐标系")]),s._v(" "),t("li",[s._v("投影变换：相机坐标系 $\\rightarrow$ 2D的空间")]),s._v(" "),t("li",[s._v("视口变换")]),s._v(" "),t("li",[s._v("光栅化")])]),s._v(" "),t("h4",{attrs:{id:"观测变换-从人眼的角度变成从相机的角度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#观测变换-从人眼的角度变成从相机的角度"}},[s._v("#")]),s._v(" 观测变换（从人眼的角度变成从相机的角度）")]),s._v(" "),t("ul",[t("li",[s._v("世界坐标系 $\\rightarrow$ 相机坐标系")]),s._v(" "),t("li",[s._v("假如有一个高斯椭球，从不同的角度观察，这个高斯椭球可能有不同的形态")]),s._v(" "),t("li",[s._v("本质还是仿射变换即 $\\boldsymbol{w}=A\\boldsymbol{x}+b$ 的过程")])]),s._v(" "),t("h5",{attrs:{id:"_3d高斯的观测变换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3d高斯的观测变换"}},[s._v("#")]),s._v(" 3d高斯的观测变换")]),s._v(" "),t("p",[s._v("世界坐标系")]),s._v(" "),t("ul",[t("li",[s._v("高斯核中心：$\\boldsymbol{t_k}=[t_0,t_1,t_2]^T$")]),s._v(" "),t("li",[s._v("协方差矩阵：$V_k^{\\prime\\prime}$")]),s._v(" "),t("li",[s._v("高斯核：$r_k^{\\prime\\prime}(t)=G_{V_k^{\\prime\\prime}}(t-t_k)$")])]),s._v(" "),t("p",[s._v("相机坐标系：从世界坐标系的一个仿射变换")]),s._v(" "),t("ul",[t("li",[s._v("高斯核中心：$\\boldsymbol{\\mu_k}=[\\mu_0,\\mu_1,\\mu_2]^T$")]),s._v(" "),t("li",[t("strong",[s._v("均值：$\\boldsymbol{\\mu_k}=W\\cdot \\boldsymbol{t_k}+d$")])]),s._v(" "),t("li",[t("strong",[s._v("协方差矩阵：$V_k^{\\prime}=W\\cdot V_k^{\\prime\\prime}\\cdot W^T$")])]),s._v(" "),t("li",[s._v("高斯核：$r_k^{\\prime}(t)=G_{V_k^{\\prime}}(\\mu-\\mu_k)$")])]),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Clizhi%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240622205409044.png",alt:"image-20240622205409044"}})]),s._v(" "),t("h4",{attrs:{id:"投影变换-从相机的角度映射到成像平面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#投影变换-从相机的角度映射到成像平面"}},[s._v("#")]),s._v(" 投影变换（从相机的角度映射到成像平面）")]),s._v(" "),t("ul",[t("li",[s._v("3D $\\rightarrow$ 2D")]),s._v(" "),t("li",[s._v("正交投影：与深度 $z$ 无关，没有远小近大的情况，好处是处理更快（因为只与$x,y$有关）")]),s._v(" "),t("li",[s._v("透视投影：考虑深度信息（符合人眼的成像原理）")]),s._v(" "),t("li",[s._v("投影变换：将锥体压成立方体，然后将立方体再压成正方体")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://yindaheng98.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/i/20231221222538.png",alt:"img"}})]),s._v(" "),t("p",[s._v("正交投影：平移+缩放")]),s._v(" "),t("p",[s._v("透视投影：压扁+平移+缩放，即先压缩再进行正交投影")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("透视投影是非仿射变换（非线性的）")]),s._v("，但我们希望高斯椭球一直进行仿射变换")])]),s._v(" "),t("h5",{attrs:{id:"_3d高斯的投影变换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3d高斯的投影变换"}},[s._v("#")]),s._v(" 3d高斯的投影变换")]),s._v(" "),t("p",[s._v("相机坐标系：")]),s._v(" "),t("ul",[t("li",[s._v("高斯核中心：$\\boldsymbol{\\mu_k}=[\\mu_0,\\mu_1,\\mu_2]^T$")]),s._v(" "),t("li",[s._v("高斯核：$r_k^{\\prime}(t)=G_{V_k^{\\prime}}(\\mu-\\mu_k)$")])]),s._v(" "),t("p",[t("strong",[s._v("投影变换Ⅰ：")])]),s._v(" "),t("p",[s._v("对于均值来说，是可以直接进行投影变换的，即$\\boldsymbol{x_k}=m(\\boldsymbol{\\mu_k})$，其中$x=m(t)$表示非线性变换（均值只是一个点，并不会产生形变）；")]),s._v(" "),t("p",[s._v("对于协方差来说，不可以直接使用投影变换，因为从透视投影到正交投影的过程中是非线性的，从而需要引入雅可比矩阵")]),s._v(" "),t("p",[t("strong",[s._v("为什么要使用雅可比矩阵（高维导数）")])]),s._v(" "),t("ul",[t("li",[s._v("泰勒展开")]),s._v(" "),t("li",[t("strong",[s._v("线性逼近：对非线性变换可以进行局部的线性逼近")])])]),s._v(" "),t("p",[s._v("非线性变换：")]),s._v(" "),t("p",[s._v("设对$[x,y]^T$进行非线性的坐标变换：\n$$\nf_1(x)=x+\\sin(y)\\\nf_2(y)=y+\\sin(x)\n$$\n即由$\\begin{bmatrix} x \\ y \\end{bmatrix} \\quad \\rightarrow \\begin{bmatrix} f_1(x) \\ f_2(y) \\end{bmatrix} \\quad$")]),s._v(" "),t("p",[s._v("雅可比矩阵：")]),s._v(" "),t("ul",[t("li",[s._v("$J=\\begin{bmatrix} \\frac{df_1}{dx} & \\frac{df_1}{dy} \\ \\frac{df_2}{dx} & \\frac{df_2}{dy}  \\end{bmatrix} \\quad$")])]),s._v(" "),t("p",[t("strong",[s._v("投影变换Ⅱ：")])]),s._v(" "),t("p",[s._v("由于无法直接对协方差进行投影变换，因此使用雅可比矩阵对该非线性变换进行线性变换的模拟变换，实施方式如下：")]),s._v(" "),t("ul",[t("li",[s._v("由$\\boldsymbol{x_k}=m(\\boldsymbol{\\mu_k})$")]),s._v(" "),t("li",[s._v("求得每一个点的雅可比矩阵 $J=\\frac{\\partial m(\\mu_k)}{\\partial \\mu}$")]),s._v(" "),t("li",[s._v("于是协方差矩阵为 $V_k=J\\cdot V_k^{\\prime} \\cdot J^T=J\\cdot W \\cdot V_k^{\\prime\\prime}\\cdot W^T\\cdot J^T$，对于协方差而言、此时的雅可比矩阵就是仿射变换矩阵，因此只是将锥形压扁，而没有继续进行平移+压缩变换")])]),s._v(" "),t("p",[s._v("注意：")]),s._v(" "),t("p",[s._v("经过投影变换中，均值被变换到了$[-1,1]^3$的范围当中，因此其需要做视口变换；")]),s._v(" "),t("p",[s._v("然而协方差矩阵在未进行放缩的正交坐标系当时，并不在$[-1,1]^3$的范围当中，其不需要做视口变换；")]),s._v(" "),t("p",[t("strong",[s._v("投影变换的雅可比矩阵是什么")])]),s._v(" "),t("p",[s._v("参考案例【较真系列】讲人话-3d gaussian splatting全解(原理+代码+公式)【2】 抛雪球-哔哩哔哩】 https://b23.tv/1FiTpns")]),s._v(" "),t("p",[s._v("17分 18秒")]),s._v(" "),t("h4",{attrs:{id:"视口变换-即拉伸变换-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视口变换-即拉伸变换-作用"}},[s._v("#")]),s._v(" 视口变换，即拉伸变换（作用？）")]),s._v(" "),t("ul",[t("li",[s._v("对投影变换的物体进行拉伸变换，与深度$z$无关")]),s._v(" "),t("li",[s._v("将$[-1,1]\\times [-1,1]$的矩阵变换至$[0,w]\\times [0,h]$")]),s._v(" "),t("li",[s._v("解决了在投影变换中由立方体 $\\rightarrow$ 正方体的形变问题")])]),s._v(" "),t("h5",{attrs:{id:"_3d高斯的视口变换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3d高斯的视口变换"}},[s._v("#")]),s._v(" 3d高斯的视口变换")]),s._v(" "),t("p",[s._v("只需要对均值进行一个视口变换")]),s._v(" "),t("p",[s._v("投影变换后：")]),s._v(" "),t("ul",[t("li",[s._v("核中心$\\boldsymbol{x_k}=[x_0,x_1,x_2]^T$")]),s._v(" "),t("li",[s._v("高斯核：$r_k(x)=G_{V_k}(x-x_k)$")])]),s._v(" "),t("p",[s._v("像素坐标系：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("核中心$\\boldsymbol{\\mu}=[\\mu_1,\\mu_2,\\mu_3]^T$")]),s._v(" "),t("ul",[t("li",[s._v("由$\\boldsymbol{x_k}=[x_0,x_1,x_2]^T$平移以及缩放得到")])])]),s._v(" "),t("li",[t("p",[s._v("协方差：进行足迹的渲染（离散计算），距离均值越近、其值越大")]),s._v(" "),t("ul",[t("li",[s._v("$G(\\tilde{x})=\\exp(-\\frac{1}{2}(x-\\mu)^TV_k^{-1}(x-\\mu))$，还是一个高斯分布")])])])]),s._v(" "),t("h4",{attrs:{id:"光栅化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#光栅化"}},[s._v("#")]),s._v(" 光栅化")]),s._v(" "),t("p",[s._v("定义：")]),s._v(" "),t("ul",[t("li",[s._v("把东西画在屏幕上")]),s._v(" "),t("li",[s._v("将连续的东西打成离散的东西")]),s._v(" "),t("li",[s._v("方法：采样\n"),t("ul",[t("li",[s._v("像素是整数的，且每个像素都有一个中心点。观察中心点是否落在面片中\n"),t("ul",[t("li",[s._v("如果中心点落在面片中，这个像素就被点亮")]),s._v(" "),t("li",[s._v("否则，像素就没有被点亮")])])]),s._v(" "),t("li",[s._v("经过这个操作，就可以知道哪些像素点被点亮，于是就可以进行涂色操作，于是完成了从连续空间到离散空间的转换")])])])]),s._v(" "),t("h3",{attrs:{id:"step3-合成雪球"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step3-合成雪球"}},[s._v("#")]),s._v(" step3：合成雪球")]),s._v(" "),t("h4",{attrs:{id:"雪球的颜色"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#雪球的颜色"}},[s._v("#")]),s._v(" 雪球的颜色")]),s._v(" "),t("p",[s._v("球谐函数：")]),s._v(" "),t("ul",[t("li",[s._v("定义：任何一个"),t("strong",[s._v("球面坐标的函数")]),s._v("（函数值与点上的方向有关）都可以用多个球谐函数近似")]),s._v(" "),t("li",[s._v("$f(t)=\\sum_l \\sum_{m=-l}^l c_l^my_l^m(\\theta,\\phi)$")]),s._v(" "),t("li",[s._v("$c_l^m$都是三维的，为了可以表示出RGB")])]),s._v(" "),t("p",[t("strong",[s._v("为什么球谐函数可以更好地表达颜色？")])]),s._v(" "),t("ul",[t("li",[s._v("（直观）正常用RGB三个数表达颜色（1*3的矩阵），但是用球谐函数就可以得到16*3的一个矩阵，因此数据的数量多、纬度高，从而可以存储的信息就会更多；")]),s._v(" "),t("li",[s._v("在CG的渲染环境中，通常会用到环境贴图，而环境贴图通常会用到球形的环境贴图。\n"),t("ul",[t("li",[s._v("在渲染的环境中，用球谐函数重建亮度")]),s._v(" "),t("li",[s._v("1阶到6阶，当球谐函数的阶数越高，还原的效果会更好。")])])])]),s._v(" "),t("p",[s._v("由此就得到了一个雪球的形成过程，那么接下来就是将多个雪球进行一个合成，即合成图片")]),s._v(" "),t("h4",{attrs:{id:"合成图片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合成图片"}},[s._v("#")]),s._v(" 合成图片")]),s._v(" "),t("p",[s._v("$\\alpha$-blending进行足迹合成")]),s._v(" "),t("p",[s._v("如何求像素的颜色？")]),s._v(" "),t("p",[s._v("然后基于每一个像素求颜色")]),s._v(" "),t("p",[s._v("方式：（NeRf）根据那个公式进行求解")]),s._v(" "),t("p",[s._v("那3dgs为什么更快呢？")]),s._v(" "),t("ul",[t("li",[s._v("splatting没有找粒子的过程")]),s._v(" "),t("li",[s._v("其只需要对高斯椭球按照深度z进行排序")])]),s._v(" "),t("p",[s._v("如何将光线上粒子的颜色进行求和？")]),s._v(" "),t("h4",{attrs:{id:"如何训练gaussian点参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何训练gaussian点参数"}},[s._v("#")]),s._v(" 如何训练Gaussian点参数")]),s._v(" "),t("p",[s._v("按照论文中的定义，Gaussian点的参数只有$\\Sigma$，其决定了椭球的形状和对称轴方向，不决定椭球的位置。 椭球的位置有另外的训练方法。")]),s._v(" "),t("p",[s._v("训练过程就是用渲染图和原图比较计算视野中高斯点的矩阵$\\Sigma$的梯度，然后梯度下降调$\\Sigma$。"),t("strong",[s._v("（与论文中的基于梯度自适应改变点云的分布有关）")])]),s._v(" "),t("p",[s._v("其梯度计算原理比较复杂，需学习"),t("a",{attrs:{href:"https://yindaheng98.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/3D%E9%AB%98%E6%96%AF%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("《3D Gaussian Splatting中的数学推导》"),t("OutboundLink")],1),s._v("，相关方法主要来自于论文 Matthias Zwicker, Hanspeter Pfister, Jeroen Van Baar, and Markus Gross. 2001a. "),t("strong",[s._v("EWA volume splatting")]),s._v(". "),t("em",[s._v("In Proceedings Visualization")]),s._v(", 2001. VIS’01. IEEE, 29–538.")]),s._v(" "),t("h4",{attrs:{id:"如何训练gaussian点位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何训练gaussian点位置"}},[s._v("#")]),s._v(" 如何训练Gaussian点位置")]),s._v(" "),t("p",[s._v("文中只提了一嘴“位置梯度”但是没有细讲，不知道具体什么实现。 但是可以参考另一篇基于EWA Splatting的文章《Differentiable surface splatting for point-based geometry processing》。")]),s._v(" "),t("h3",{attrs:{id:"各迭代参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各迭代参数"}},[s._v("#")]),s._v(" 各迭代参数")]),s._v(" "),t("p",[s._v("位置信息：$(x,y,z)$，即中心点信息")]),s._v(" "),t("p",[s._v("法向量信息：$(nx,ny,nz)$，即光照")]),s._v(" "),t("p",[s._v("颜色信息：用了4阶的球谐函数，一共48个参数，SH系数$(f_dc_0,f_dc_1,f_dc_2)$，以及$(f_rest_0,...,f_rest_44)$")]),s._v(" "),t("p",[s._v("不透明度：opacity, $\\alpha$")]),s._v(" "),t("p",[s._v("缩放矩阵：$(scale_0,scale_1,scale_2)$")]),s._v(" "),t("p",[s._v("旋转矩阵：$(rot_0,rot_1,rot_2)$")]),s._v(" "),t("h3",{attrs:{id:"如何迭代-基于梯度自适应改变点云的分布方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何迭代-基于梯度自适应改变点云的分布方式"}},[s._v("#")]),s._v(" 如何迭代：基于梯度自适应改变点云的分布方式")]),s._v(" "),t("h4",{attrs:{id:"如何增加gaussian点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何增加gaussian点"}},[s._v("#")]),s._v(" 如何增加Gaussian点")]),s._v(" "),t("p",[s._v("方式：重新采样")]),s._v(" "),t("p",[s._v("标准：（基于梯度的变化判断）")]),s._v(" "),t("p",[s._v("梯度很大，说明高斯椭球与要拟合的形体差异很大，因此需要判断形体的差异大来源于方差小 / 方差大")]),s._v(" "),t("ol",[t("li",[s._v("过度重构的：方差很大，因此可以分成两个高斯")]),s._v(" "),t("li",[s._v("欠采样：方差太小，克隆高斯以适应")])]),s._v(" "),t("h4",{attrs:{id:"如何减少gaussian点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何减少gaussian点"}},[s._v("#")]),s._v(" 如何减少Gaussian点")]),s._v(" "),t("p",[s._v("目的：")]),s._v(" "),t("ul",[t("li",[s._v("删除不重要的Gaussian点以减小计算量；")]),s._v(" "),t("li",[s._v("应对相机面前的错误点（floaters close to the input cameras）")])]),s._v(" "),t("p",[s._v("方法：")]),s._v(" "),t("ul",[t("li",[s._v("删除不重要的Gaussian点以减小计算量：在训练过程中会有一些Gaussian点的透明度不断下降到小于给定阈值，这些Gaussian点在训练过程中被删除；")]),s._v(" "),t("li",[s._v("应对相机面前的错误点：\n"),t("ol",[t("li",[s._v("每个一段时间就将Gaussian点的透明度设为0；")]),s._v(" "),t("li",[s._v("禁用点的增加和移动功能，仅对Gaussian点的参数进行一段时间训练；\n"),t("ul",[t("li",[s._v("有些Gaussian点会在训练过程中变大，覆盖住其他点或者盖住相机，进而删除这些点；")])])]),s._v(" "),t("li",[s._v("训练完成后会有一些Gaussian点透明度仍然接近0，删除这些点；")])])])]),s._v(" "),t("blockquote",[t("h4",{attrs:{id:"相机面前的错误点-floaters-close-to-the-input-cameras-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相机面前的错误点-floaters-close-to-the-input-cameras-是什么"}},[s._v("#")]),s._v(" 相机面前的错误点(floaters close to the input cameras)是什么")]),s._v(" "),t("p",[s._v("理论上讲，在每个输入视角面前摆上输入图片，就可以让NeRF训练误差降到0。 这也是NeRF的一种过拟合，正因为如此，NeRF在训练过程中会有概率在输入视角附近训练出一些错误点。 尤其是在相机参数的有误差的时候，输入图像上的某些点时无解的，这是如果用DNN较大的NeRF进行过度的训练，NeRF不管怎么样都没法在场景中找到某些点的最优解，就会将点放在相机面前。")])]),s._v(" "),t("h2",{attrs:{id:"_3d高斯的代码框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3d高斯的代码框架"}},[s._v("#")]),s._v(" 3D高斯的代码框架")]),s._v(" "),t("p",[s._v("主要的代码框架即两个：由“点云”经过“Rasterization”生成“图片”，由“loss”根据反向梯度传播进行微分优化。并且其并没有使用神经网络结构，核心代码是C++，因此主要目的在于跑通这个代码，并且用自己的数据集跑通。")]),s._v(" "),t("p",[s._v("首次用自己的数据集跑通，难点在于1. colmap的linux安装；2. 远程可视化，但实际上回头看发现只是熟练度的问题，因此在后面的NeRF的实验中也存在这个问题。")]),s._v(" "),t("p",[s._v("核心代码在"),t("code",[s._v("submodules/diff-gaussian-rasterization")]),s._v(".Rasterization 和 Differential 分别是"),t("code",[s._v("forward")]),s._v("和"),t("code",[s._v("backward")]),s._v("过程。")]),s._v(" "),t("div",{staticClass:"language-C++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#\n# Copyright (C) 2023, Inria\n# GRAPHDECO research group, https://team.inria.fr/graphdeco\n# All rights reserved.\n#\n# This software is free for non-commercial, research and evaluation use \n# under the terms of the LICENSE.md file.\n#\n# For inquiries contact  george.drettakis@inria.fr\n#\n\nfrom typing import NamedTuple\nimport torch.nn as nn\nimport torch\nfrom . import _C\n\ndef cpu_deep_copy_tuple(input_tuple):\n    copied_tensors = [item.cpu().clone() if isinstance(item, torch.Tensor) else item for item in input_tuple]\n    return tuple(copied_tensors)\n\ndef rasterize_gaussians(\n    means3D,\n    means2D,\n    sh,\n    colors_precomp,\n    opacities,\n    scales,\n    rotations,\n    cov3Ds_precomp,\n    raster_settings,\n):\n    return _RasterizeGaussians.apply(\n        means3D,\n        means2D,\n        sh,\n        colors_precomp,\n        opacities,\n        scales,\n        rotations,\n        cov3Ds_precomp,\n        raster_settings,\n    )\n\nclass _RasterizeGaussians(torch.autograd.Function):\n    @staticmethod\n    def forward(\n        ctx,\n        means3D,\n        means2D,\n        sh,\n        colors_precomp,\n        opacities,\n        scales,\n        rotations,\n        cov3Ds_precomp,\n        raster_settings,\n    ):\n\n        # Restructure arguments the way that the C++ lib expects them\n        args = (\n            raster_settings.bg, \n            means3D,\n            colors_precomp,\n            opacities,\n            scales,\n            rotations,\n            raster_settings.scale_modifier,\n            cov3Ds_precomp,\n            raster_settings.viewmatrix,\n            raster_settings.projmatrix,\n            raster_settings.tanfovx,\n            raster_settings.tanfovy,\n            raster_settings.image_height,\n            raster_settings.image_width,\n            sh,\n            raster_settings.sh_degree,\n            raster_settings.campos,\n            raster_settings.prefiltered,\n            raster_settings.debug\n        )\n\n        # Invoke C++/CUDA rasterizer\n        if raster_settings.debug:\n            cpu_args = cpu_deep_copy_tuple(args) # Copy them before they can be corrupted\n            try:\n                num_rendered, color, radii, geomBuffer, binningBuffer, imgBuffer = _C.rasterize_gaussians(*args)\n            except Exception as ex:\n                torch.save(cpu_args, "snapshot_fw.dump")\n                print("\\nAn error occured in forward. Please forward snapshot_fw.dump for debugging.")\n                raise ex\n        else:\n            num_rendered, color, radii, geomBuffer, binningBuffer, imgBuffer = _C.rasterize_gaussians(*args)\n\n        # Keep relevant tensors for backward\n        ctx.raster_settings = raster_settings\n        ctx.num_rendered = num_rendered\n        ctx.save_for_backward(colors_precomp, means3D, scales, rotations, cov3Ds_precomp, radii, sh, geomBuffer, binningBuffer, imgBuffer)\n        return color, radii\n\n    @staticmethod\n    def backward(ctx, grad_out_color, _):\n\n        # Restore necessary values from context\n        num_rendered = ctx.num_rendered\n        raster_settings = ctx.raster_settings\n        colors_precomp, means3D, scales, rotations, cov3Ds_precomp, radii, sh, geomBuffer, binningBuffer, imgBuffer = ctx.saved_tensors\n\n        # Restructure args as C++ method expects them\n        args = (raster_settings.bg,\n                means3D, \n                radii, \n                colors_precomp, \n                scales, \n                rotations, \n                raster_settings.scale_modifier, \n                cov3Ds_precomp, \n                raster_settings.viewmatrix, \n                raster_settings.projmatrix, \n                raster_settings.tanfovx, \n                raster_settings.tanfovy, \n                grad_out_color, \n                sh, \n                raster_settings.sh_degree, \n                raster_settings.campos,\n                geomBuffer,\n                num_rendered,\n                binningBuffer,\n                imgBuffer,\n                raster_settings.debug)\n\n        # Compute gradients for relevant tensors by invoking backward method\n        if raster_settings.debug:\n            cpu_args = cpu_deep_copy_tuple(args) # Copy them before they can be corrupted\n            try:\n                grad_means2D, grad_colors_precomp, grad_opacities, grad_means3D, grad_cov3Ds_precomp, grad_sh, grad_scales, grad_rotations = _C.rasterize_gaussians_backward(*args)\n            except Exception as ex:\n                torch.save(cpu_args, "snapshot_bw.dump")\n                print("\\nAn error occured in backward. Writing snapshot_bw.dump for debugging.\\n")\n                raise ex\n        else:\n             grad_means2D, grad_colors_precomp, grad_opacities, grad_means3D, grad_cov3Ds_precomp, grad_sh, grad_scales, grad_rotations = _C.rasterize_gaussians_backward(*args)\n\n        grads = (\n            grad_means3D,\n            grad_means2D,\n            grad_sh,\n            grad_colors_precomp,\n            grad_opacities,\n            grad_scales,\n            grad_rotations,\n            grad_cov3Ds_precomp,\n            None,\n        )\n\n        return grads\n\nclass GaussianRasterizationSettings(NamedTuple):\n    image_height: int\n    image_width: int \n    tanfovx : float\n    tanfovy : float\n    bg : torch.Tensor\n    scale_modifier : float\n    viewmatrix : torch.Tensor\n    projmatrix : torch.Tensor\n    sh_degree : int\n    campos : torch.Tensor\n    prefiltered : bool\n    debug : bool\n\nclass GaussianRasterizer(nn.Module):\n    def __init__(self, raster_settings):\n        super().__init__()\n        self.raster_settings = raster_settings\n\n    def markVisible(self, positions):\n        # Mark visible points (based on frustum culling for camera) with a boolean \n        with torch.no_grad():\n            raster_settings = self.raster_settings\n            visible = _C.mark_visible(\n                positions,\n                raster_settings.viewmatrix,\n                raster_settings.projmatrix)\n            \n        return visible\n\n    def forward(self, means3D, means2D, opacities, shs = None, colors_precomp = None, scales = None, rotations = None, cov3D_precomp = None):\n        \n        raster_settings = self.raster_settings\n\n        if (shs is None and colors_precomp is None) or (shs is not None and colors_precomp is not None):\n            raise Exception(\'Please provide excatly one of either SHs or precomputed colors!\')\n        \n        if ((scales is None or rotations is None) and cov3D_precomp is None) or ((scales is not None or rotations is not None) and cov3D_precomp is not None):\n            raise Exception(\'Please provide exactly one of either scale/rotation pair or precomputed 3D covariance!\')\n        \n        if shs is None:\n            shs = torch.Tensor([])\n        if colors_precomp is None:\n            colors_precomp = torch.Tensor([])\n\n        if scales is None:\n            scales = torch.Tensor([])\n        if rotations is None:\n            rotations = torch.Tensor([])\n        if cov3D_precomp is None:\n            cov3D_precomp = torch.Tensor([])\n\n        # Invoke C++/CUDA rasterization routine\n        return rasterize_gaussians(\n            means3D,\n            means2D,\n            shs,\n            colors_precomp,\n            opacities,\n            scales, \n            rotations,\n            cov3D_precomp,\n            raster_settings, \n        )\n')])])])])}),[],!1,null,null,null);t.default=_.exports}}]);